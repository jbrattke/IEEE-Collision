
class loMtShapes : public loShapes, public Shape {
  public:
    
    loMtShapes() {}
    
    void drawShapes() {}
    
    void addShape(Shape *shape) {
      loShapes output ;
      output.addShapeMT(shape) ;
    }
    
    void addShapeMT(Shape *shape) {}
    
} ;



    virtual void boundedBox() {}
    virtual void checkCollision() {}
    
    
    
    
    
    else if ((this->x + this->width == b->x && this->y + this->height == b->y) ||
                (b->x + b->width == this->x && b->y + b->height == this->y)) {
        this->direcx *= (this->direcx == 1 && this->direcy == -1) ? -1 : -1 ;
        this->direcy *= (this->direcx == 1 && this->direcy == -1) ? -1 : 1 ;
        b->direcx *= (b->direcx == -1 && b->direcy == 1) ? -1 : -1 ;
        b->direcy *= (b->direcx == -1 && b->direcy == 1) ? -1 : 1 ;
        
      } else if ((this->x + this->width == b->x && this->y == b->y + b->height) ||
                (b->x + b->width == this->x && b->y == this->y + this->height)) {
        this->direcx *= (this->direcx == 1 && this->direcy == 1) ? -1 : 1 ;
        this->direcy *= (this->direcx == 1 && this->direcy == 1) ? -1 : -1 ;
        b->direcx *= (b->direcx == -1 && b->direcy == -1) ? -1 : 1 ;
        b->direcy *= (b->direcx == -1 && b->direcy == -1) ? -1 : -1 ;
      }
      
      
      
      
      


void direcChange(Shape *b) {
      if(this->direcy == b->direcy) {
        this->direcx *= -1 ;
        b->direcx *= -1 ;
        
      } else if (this->direcx == b->direcx) {
        this->direcy *= -1 ;
        b->direcy *= -1 ;
        
      } else if (((this->x + this->width == b->x) || (b->x + b->width == this->x)) && 
                ((b->y <= this->y + this->height <= b->y + b->height) || 
                (this->y <= b->y + b->height <= this->y + this->height)) &&
                ((this->y != b->y + b->height) && (b->y != this->y + this->height))) {
        this->direcx *= -1 ;
        b->direcx *= -1 ;
        
      } else if (((this->y + this->height == b->y) || (b->y + b->height == this->y)) && 
                ((b->x <= this->x + this->width <= b->x + b->width) || 
                (this->x <= b->x + b->width <= this->x + this->width)) &&
                ((this->x != b->x + b->width) && (b->x != this->x + this->width))) {
        this->direcy *= -1 ;
        b->direcy *= -1 ;
        
      } else if ((this->direcx == 1 && this->direcy == -1 &&
                 b->direcx == -1 && b->direcy == 1) ||
                 (this->direcx == -1 && this->direcy == 1 &&
                 b->direcx == 1 && b->direcy == -1)) {
        this->direcx *= -1 ;
        b->direcx *= -1 ;
        this->direcy *= -1 ;
        b->direcy *= -1 ;
      }
}


void move() {
      int newX, newY ;
      newX = this->x + this->direcx ;
      newY = this->y + this->direcy ;
      
      if(newX < 10) {
        this->direcx = 1 ;
      } else if (newX > (310 - this->width)) {
        this->direcx = -1 ;
      }
      
      if(newY < 10) {
        this->direcy = 1 ;
      } else if (newY > (230 - this->width)) {
        this->direcy = -1 ;
      }
      
      newX = this->x + this->direcx ;
      newY = this->y + this->direcy ;
      
      this->clearShape() ;
      
      this->x = newX ;
      this->y = newY ;
       
      this->draw(newX, newY) ;
    }
    
    
    
    
    
    
char keypad_in() {
    unsigned int base_direc = 15 ;
    unsigned int base_data = 240 ;
  
    char keys[4][4] = {
     {'1', '2', '3', 'A'},
     {'4', '5', '6', 'B'},
     {'7', '8', '9', 'C'},
     {'*', '0', '#', 'D'}}; 
  
    int rowRead = RegisterRead(JP1_Data_Register) ;
    
    while(rowRead == 0) {
      RegisterWrite(JP1_Data_Register, 0) ;
    }
    
    RegisterWrite(JP1_Data_Register, base_direc) ;
    RegisterWrite(JP1_Direction_Register, base_data) ;
    
    rowRead = rowRead ^ base_data ;
    
    for(int r = 0 ; r < 4 ; r++) {
      if(rowRead >> (15 + r) % 2 == 1) {
        rowRead = r ;
      }
    }
    
    int colRead = RegisterRead(JP1_Data_Register) ;
    colRead = colRead ^ base_direc ;
    
    for(int c = 0 ; c < 4 ; c++) {
      if(colRead >> (9 + c) % 2 == 1) {
        colRead = c ;
      }
    }
    
    RegisterWrite(JP1_Data_Register, base_direc) ;
    RegisterWrite(JP1_Direction_Register, base_data) ; 
    
    char numRead = -1 ;
    
    if(rowRead != -1 && colRead != -1) {
      numRead = keys[rowRead][colRead] ;
    }
    
    return numRead ;
    
  }
      
      
      
      
      
      
  
  int get_row_high() {
    int data_register = RegisterRead(JP1_Data_Register) ;
    
    int output = -1; 
    
    for(int r = 0 ; r < 4 ; r++) {
      if(data_register >> r) {
        output = r ;
      }
    }
    return output ;
  }
  
  char get_key() {
    char keys[4][4] = {
     {'1', '2', '3', 'A'},
     {'4', '5', '6', 'B'},
     {'7', '8', '9', 'C'},
     {'*', '0', '#', 'D'}};  
     
    char key = ' ';
    
    unsigned int base = 43520 ;
     
    unsigned int data_register = RegisterRead(JP1_Data_Register) ;
  
    int rowHigh = get_row_high() ;
    
    for(int c = 0 ; c < 4 ; c++) {
      RegisterWrite(JP1_Data_Register, base & 10 << (9 + c)) ;
      
      if(rowHigh != -1) {
        key = keys[rowHigh][c] ;
      }
    }
    
    RegisterWrite(JP1_Data_Register, base) ;
    
    return key ;
  }

      
      
      
      
void direcChange(Shape *b) {
      if ((this->x == b->x + b->width && this->y == b->y + b->height && this->direcx == -1 && this->direcy == -1 && b->direcx == 1 && b->direcy == 1) || 
          (b->x == this->x + this->width && b->y == this->y + this->height && this->direcx == 1 && this->direcy == 1 && b->direcx == -1 && b->direcy == -1) ||
          (this->y == b->y + b->height && b->x == this->x + this->width && this->direcx == -1 && this->direcy == 1 && b->direcx == 1 && b->direcy == -1) || 
          (b->y == this->y + this->height && this->x == b->x + b->width && this->direcx == 1 && this->direcy == -1 && b->direcx == -1 && b->direcy == 1)) {
        this->direcx *= -1 ;
        b->direcx *= -1 ;
        this->direcy *= -1 ;
        b->direcy *= -1 ;
        
      } else if (this->x + this->width == b->x || b->x + b->width == this->x) {
        this->direcx *= -1 ;
        b->direcx *= -1 ;
        
      }else if (this->y == b->y + b->height || b->y == this->y + this->height) {
        this->direcy *= -1 ;
        b->direcy *= -1 ;
        
      } 
    }
    
    
    
    
    
    void hitEdge() {
      int newX, newY ;
      newX = this->x + this->direcx ;
      newY = this->y + this->direcy ;
    
      if(newX <= 10) {
        this->direcx = 1 ;
      } else if (newX >= (310 - this->width)) {
        this->direcx = -1 ;
      }
      
      if(newY <= 10) {
        this->direcy = 1 ;
      } else if (newY >= (230 - this->width)) {
        this->direcy = -1 ;
      }
    }
      
    
    
    
    
    
    
    
    
  char get_key() {
    RegisterWrite(JP1_Data_Register, 0b01111111) ;
    
    if (RegisterRead(JP1_Data_Register) == -137) {
      return '1' ;
    } else if (RegisterRead(JP1_Data_Register) == -133) {
      return '2' ;
    } else if (RegisterRead(JP1_Data_Register) == -131) {
      return '3' ;
    } else if (RegisterRead(JP1_Data_Register) == -130) {
      return 'A' ;
    } else {
      RegisterWrite(JP1_Data_Register, 0b10111111) ;
      
      if (RegisterRead(JP1_Data_Register) == -73) {
        return '4' ;
      } else if (RegisterRead(JP1_Data_Register) == -69) {
        return '5' ;
      } else if (RegisterRead(JP1_Data_Register) == -67) {
        return '6' ;
      } else if (RegisterRead(JP1_Data_Register) == -66) {
        return 'B' ;      
      } else {
        RegisterWrite(JP1_Data_Register, 0b11011111) ;
        
        if (RegisterRead(JP1_Data_Register) == -41) {
          return '7' ;
        } else if (RegisterRead(JP1_Data_Register) == -37) {
          return '8' ;
        } else if (RegisterRead(JP1_Data_Register) == -35) {
          return '9' ;
        } else if (RegisterRead(JP1_Data_Register) == -34) {
          return 'C' ;
        } else {
          RegisterWrite(JP1_Data_Register, 0b11101111) ;
          
          if (RegisterRead(JP1_Data_Register) == -25) {
            return '*' ;
          } else if (RegisterRead(JP1_Data_Register) == -21) {
            return '0' ;
          } else if (RegisterRead(JP1_Data_Register) == -19) {
            return '#' ;
          } else if (RegisterRead(JP1_Data_Register) == -18) {
            return 'D' ;
          } else {
            return ' ';
          }
        }
      }
    }
  }  
      
      
      
      
      
      
      
class shapeChanger {
  public:
  Shape * changeShape(Shape *shape) {
      Square *sqr = new Square(0,0,0,0,0,0) ;
      Cross *crss ;
      Circle *crcl ;
      Triangle *trg ;
      Rectangle *rect ;
      Star *str ;
      shapeX *x ;
      shapeL *l ;
      shapeT *t ;
      shapeV *v ;
      
      Shape *output ;
      
      bool check = typeid(shape).name() == typeid(sqr).name() ;
      
      cout << check << endl ;
      
      if(typeid(shape).name() == typeid(sqr).name()) { output = new Cross(shape->x, shape->y, shape->width, shape->color, shape->direcx, shape->direcy) ; } 
      //else if (typThis == typCrss) { output = new Circle(shape->x, shape->y, shape->width, shape->color, shape->direcx, shape->direcy) ; }
      else { output = shape ;}
      
      
      return output ;
    }
} ;






    